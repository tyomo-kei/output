{
  "fileTypes": [
    "nim",
    "nims"
  ],
  "name": "Nim",
  "patterns": [
    {
      "begin": "(\\#\\[\\s*(TODO|todo)?)",
      "captures": {
        "1": {
          "name": "punctuation.definition.multi-comment.nim"
        },
        "2": {
          "name": "invalid.illegal.TODO.nim"
        }
      },
      "comment": "A multiline comment.",
      "end": "(.*]\\#)",
      "name": "comment.line.number-sign.multi-comment.nim"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.doc-comment.nim"
        },
        "2": {
          "name": "invalid.illegal.TODO.nim"
        }
      },
      "comment": "A documentation comment.",
      "match": "(##\\s*(TODO|todo)?).+$\\n?",
      "name": "comment.line.number-sign.doc-comment.nim"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.doc-comment.empty.nim"
        }
      },
      "comment": "An empty documentation comment.",
      "match": "(##\\s*)$\\n?",
      "name": "comment.line.number-sign.doc-comment.empty.nim"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.nim"
        },
        "2": {
          "name": "invalid.illegal.TODO.nim"
        }
      },
      "comment": "A regular comment",
      "match": "(#\\s*(TODO|todo)?).*$\\n?",
      "name": "comment.line.number-sign.comment.nim"
    },
    {
      "comment": "C",
      "name": "source.c.embedded.nim",
      "patterns": [
        {
          "begin": "\\{\\.(emit:) ?(\\\"\\\"\\\")",
          "captures": {
            "1": {
              "name": "keyword.other.nim"
            },
            "2": {
              "name": "comment.syntax.nim"
            }
          },
          "end": "(\\\"\\\"\\\")\\.?",
          "endCaptures": {
            "1": {
              "name": "comment.syntax.nim"
            }
          },
          "patterns": [
            {
              "begin": "\\`",
              "end": "\\`",
              "name": "keyword.operator.nim"
            },
            {
              "include": "source.c"
            }
          ]
        }
      ]
    },
    {
      "comment": "assembly",
      "name": "source.asm.embedded.nim",
      "patterns": [
        {
          "begin": "(asm )(\\\"\\\"\\\")",
          "captures": {
            "1": {
              "name": "keyword.other.nim"
            },
            "2": {
              "name": "comment.syntax.nim"
            }
          },
          "end": "\\\"\\\"\\\"",
          "endCaptures": {
            "0": {
              "name": "comment.syntax.nim"
            }
          },
          "patterns": [
            {
              "begin": "\\`",
              "end": "\\`",
              "name": "keyword.operator.nim"
            },
            {
              "include": "source.asm"
            }
          ]
        }
      ]
    },
    {
      "comment": "A nim procedure or method declaration",
      "name": "meta.proc.nim",
      "patterns": [
        {
          "begin": "(?<![\\w\\x{80}-\\x{10FFFF}])(proc|method|template|macro|iterator|converter)\\s+((\\`[^\\s\\`]+\\`)|([\\w\\x{80}-\\x{10FFFF}]+))(\\*)?",
          "beginCaptures": {
            "1": {
              "name": "storage.type.proc.nim"
            },
            "2": {
              "name": "entity.name.function.nim"
            },
            "5": {
              "name": "keyword.operator.secondary.kw-public.nim"
            }
          },
          "end": "(\\=)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.nim"
            }
          },
          "patterns": [
            {
              "comment": "Generic",
              "match": "\\[[\\w\\x{80}-\\x{10FFFF}]+\\]"
            },
            {
              "begin": "\\{",
              "comment": "Pattern",
              "end": "\\}",
              "patterns": [
                {
                  "begin": "\\\"",
                  "end": "\\\"",
                  "name": "string.something.nim"
                },
                {
                  "match": "([\\w\\x{80}-\\x{10FFFF}]+)",
                  "name": "entity.other.attribute-name.pattern.nim"
                }
              ]
            },
            {
              "begin": "\\(",
              "comment": "Parameters",
              "end": "\\)",
              "patterns": [
                {
                  "begin": "\\{",
                  "comment": "Pattern",
                  "end": "\\}",
                  "patterns": [
                    {
                      "begin": "\\\"",
                      "end": "\\\"",
                      "name": "string.something.nim"
                    },
                    {
                      "match": "([\\[\\]\\w\\x{80}-\\x{10FFFF}]+)",
                      "name": "entity.other.attribute-name.pattern.nim"
                    }
                  ]
                },
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "include": "source.nim"
            }
          ]
        }
      ]
    },
    {
      "begin": "\\{\\.",
      "comment": "Pragmas",
      "end": "\\.?\\}",
      "name": "pragma",
      "patterns": [
        {
          "begin": "\\\"",
          "end": "\\\"",
          "name": "string.something.nim"
        },
        {
          "match": "([\\w\\x{80}-\\x{10FFFF}]+)",
          "name": "entity.other.attribute-name.pragma.nim"
        }
      ]
    },
    {
      "begin": "discard \\\"\\\"\\\"",
      "comment": "A discarded triple string literal comment",
      "end": "\\\"\\\"\\\"",
      "name": "comment.line.discarded.nim"
    },
    {
      "comment": "A float literal",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(\\d[_\\d]*((\\.[_\\d]+([eE][\\+\\-]?\\d[_\\d]*)?)|([eE][\\+\\-]?\\d[_\\d]*)))('?([fF](32|64|128))|[fFdD])?",
      "name": "constant.numeric.float.decimal.nim"
    },
    {
      "comment": "A hexadecimal literal",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(0[xX]\\h[_\\h]*)('?(([iIuUfF](8|16|32|64))|[uUfFdD]))?",
      "name": "constant.numeric.integer.hexadecimal.nim"
    },
    {
      "comment": "A base-8 integer literal",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(0[ocC][0-7][_0-7]*)('?(([iIuUfF](8|16|32|64))|[uUfFdD]))?",
      "name": "constant.numeric.integer.octal.nim"
    },
    {
      "comment": "A base-2 integer literal",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(0(b|B)[01][_01]*)('?(([iIuUfF](8|16|32|64))|[uUfFdD]))?",
      "name": "constant.numeric.integer.binary.nim"
    },
    {
      "comment": "A base-10 integer literal",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(\\d[_\\d]*)('?(([iIuUfF](8|16|32|64))|[uUfFdD]))?",
      "name": "constant.numeric.integer.decimal.nim"
    },
    {
      "comment": "Language Constants.",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(true|false|inf|nil)(?![\\w\\x{80}-\\x{10FFFF}])",
      "name": "constant.language.nim"
    },
    {
      "begin": "(?:^|\\s+|=)(when|if)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.primary.nim"
        }
      },
      "comment": "Primary branching keywords",
      "end": "(?=:)",
      "endCaptures": {
        "1": {
          "name": "control.variable.parameter.nim"
        }
      },
      "patterns": [
        {
          "include": "source.nim"
        }
      ]
    },
    {
      "begin": "(?:^|\\s+|=)(case)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.primary.nim"
        }
      },
      "comment": "Primary branching keyword 'case'",
      "end": "(?=\\bof\\b)",
      "endCaptures": {
        "1": {
          "name": "control.variable.parameter.nim"
        }
      },
      "patterns": [
        {
          "include": "source.nim"
        }
      ]
    },
    {
      "begin": "(?:^|\\s+)(of|else|elif)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.secondary.nim"
        }
      },
      "comment": "Secondary branching keywords and their conditions",
      "end": "(?=:)",
      "endCaptures": {
        "1": {
          "name": "control.variable.parameter.nim"
        }
      },
      "patterns": [
        {
          "include": "source.nim"
        }
      ]
    },
    {
      "comment": "Keywords that affect program control flow or scope.",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(await|block|break|continue|do|end|except|finally|raise|return|try|while|yield)(?![\\w\\x{80}-\\x{10FFFF}])",
      "name": "keyword.control.nim"
    },
    {
      "comment": "Keyword boolean operators for expressions.",
      "match": "((?<![\\w\\x{80}-\\x{10FFFF}])(and|in|is|isnot|not|notin|or|xor)(?![\\w\\x{80}-\\x{10FFFF}]))",
      "name": "keyword.operator.boolean.nim"
    },
    {
      "comment": "Other keywords.",
      "match": "((?<![\\w\\x{80}-\\x{10FFFF}])(addr|as|atomic|bind|cast|const|converter|defer|discard|distinct|div|enum|export|include|let|mixin|object|of|ptr|ref|shl|shr|static|type|var)(?![\\w\\x{80}-\\x{10FFFF}]))",
      "name": "keyword.other.nim"
    },
    {
      "comment": "Generic operators for expressions.",
      "match": "(\\b()\\b|(=|\\+|-|\\*|/|<|>|@|\\$|~|&|%|!|\\?|\\^|\\.|:|\\\\)+)",
      "name": "keyword.operator.nim"
    },
    {
      "begin": "(for)\\s+",
      "captures": {
        "1": {
          "name": "keyword.control.nim"
        }
      },
      "comment": "in keyword in a 'for' loop",
      "end": "(?=:)",
      "name": "meta.forloop.nim",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "keyword.control.nim"
            }
          },
          "match": "\\ [\\w\\x{80}-\\x{10FFFF},]+\\s+(in)\\s+"
        },
        {
          "include": "source.nim"
        }
      ]
    },
    {
      "captures": {
        "2": {
          "name": "keyword.control.nim"
        }
      },
      "comment": "Import syntax",
      "match": "((import)\\s+[\\/\\w]+,?)"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.control.nim"
        }
      },
      "match": "(from)\\s+[\\/\\w]+\\s+(?=import)"
    },
    {
      "begin": "(var|let)\\s*\\(",
      "captures": {
        "1": {
          "name": "keyword.other.nim"
        }
      },
      "comment": "Destructure syntax",
      "end": "\\)"
    },
    {
      "comment": "Invalid and unused keywords.",
      "match": "((?<![\\w\\x{80}-\\x{10FFFF}])(generic|interface|lambda|out|shared|with|without)(?![\\w\\x{80}-\\x{10FFFF}]))",
      "name": "keyword.invalid.nim"
    },
    {
      "comment": "Common functions",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(len|high|low)(?![\\w\\x{80}-\\x{10FFFF}])",
      "name": "support.function.any-method.nim"
    },
    {
      "comment": "Built-in, concrete types.",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(((uint|int|float)(8|16|32|64)?)|bool|string|auto|cstring|char|byte|tobject|typedesc|stmt|expr|any)(?![\\w\\x{80}-\\x{10FFFF}])",
      "name": "storage.type.concrete.nim"
    },
    {
      "comment": "Built-in, generic types.",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(range|array|seq|tuple|natural|set|ref|ptr)(?![\\w\\x{80}-\\x{10FFFF}])",
      "name": "storage.type.generic.nim"
    },
    {
      "comment": "Function types",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(proc|iterator|method|template|macro)(?![\\w\\x{80}-\\x{10FFFF}])",
      "name": "storage.type.function.nim"
    },
    {
      "comment": "Special types.",
      "match": "(?<![\\w\\x{80}-\\x{10FFFF}])(openarray|varargs|void)(?![\\w\\x{80}-\\x{10FFFF}])",
      "name": "storage.type.generic.nim"
    },
    {
      "begin": "r?\\\"\\\"\\\"",
      "comment": "(Raw) Triple Quoted String",
      "end": "\\\"\\\"\\\"[^\\\"]",
      "name": "string.quoted.triple.nim"
    },
    {
      "begin": "r\\\"",
      "comment": "Raw Double Quoted String",
      "end": "\\\"",
      "name": "string.quoted.double.raw.nim",
      "patterns": [
        {
          "match": "\\\"\\\""
        }
      ]
    },
    {
      "begin": "\\\"",
      "comment": "Double Quoted String",
      "end": "\\\"",
      "name": "string.quoted.double.nim",
      "patterns": [
        {
          "include": "#escaped_char"
        }
      ]
    },
    {
      "begin": "\\'",
      "comment": "Single quoted character literal",
      "end": "\\'",
      "name": "string.quoted.single.nim",
      "patterns": [
        {
          "match": "\\\\n",
          "name": "invalid.illegal.character.nim"
        },
        {
          "include": "#escaped_char"
        },
        {
          "match": "([^\\']{2,}?)",
          "name": "invalid.illegal.character.nim"
        }
      ]
    },
    {
      "begin": "([\\w\\x{80}-\\x{10FFFF}\\`]+)\\s*(?=\\(|\\[.+?\\]\\s*\\()",
      "captures": {
        "1": {
          "name": "support.function.any-method.nim"
        }
      },
      "comment": "Call syntax",
      "end": "\\)",
      "patterns": [
        {
          "include": "source.nim"
        }
      ]
    },
    {
      "captures": {
        "1": {
          "name": "support.function.any-method.nim"
        }
      },
      "comment": "Command syntax",
      "match": "([\\w\\x{80}-\\x{10FFFF}]+)(?=\\s+[\\w](?![\\w\\x{80}-\\x{10FFFF}]+((?!\\n)\\s)+))",
      "patterns": [
        {
          "include": "source.nim"
        }
      ]
    },
    {
      "captures": {
        "1": {
          "name": "support.function.any-method.nim"
        }
      },
      "match": "([\\w\\x{80}-\\x{10FFFF}]+)(?=\\s+[\\\"\\'\\`])",
      "patterns": [
        {
          "include": "source.nim"
        }
      ]
    },
    {
      "captures": {
        "1": {
          "name": "storage.type.function.nim"
        },
        "2": {
          "name": "keyword.operator.nim"
        }
      },
      "comment": "tmpl specifier",
      "match": "(tmpl(i)?)(?=( (nim|html|xml|js|css|glsl|md))?\\\"\\\"\\\")"
    },
    {
      "name": "source.nim.embedded.nim",
      "patterns": [
        {
          "begin": "(nim)(\\\"\\\"\\\")",
          "captures": {
            "1": {
              "name": "storage.type.function.nim"
            },
            "2": {
              "name": "comment.syntax.nim"
            }
          },
          "end": "\\\"\\\"\\\"",
          "endCaptures": {
            "0": {
              "name": "comment.syntax.nim"
            }
          },
          "patterns": [
            {
              "begin": "(?<!\\$)(\\$)\\(",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\)",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)\\{",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\}",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.control.nim"
                }
              },
              "end": "(\\{|\\n)",
              "endCaptures": {
                "1": {
                  "name": "plain"
                }
              },
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "match": "(?<!\\$)(\\$[a-zA-Z0-9_]+)",
              "name": "keyword.operator.nim"
            },
            {
              "include": "source.nim"
            }
          ]
        }
      ]
    },
    {
      "name": "source.html.embedded.nim",
      "patterns": [
        {
          "begin": "(html)(\\\"\\\"\\\")",
          "captures": {
            "1": {
              "name": "storage.type.function.nim"
            },
            "2": {
              "name": "comment.syntax.nim"
            }
          },
          "end": "\\\"\\\"\\\"",
          "endCaptures": {
            "0": {
              "name": "comment.syntax.nim"
            }
          },
          "patterns": [
            {
              "begin": "(?<!\\$)(\\$)\\(",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\)",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)\\{",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\}",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.control.nim"
                }
              },
              "end": "(\\{|\\n)",
              "endCaptures": {
                "1": {
                  "name": "plain"
                }
              },
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "match": "(?<!\\$)(\\$[a-zA-Z0-9_]+)",
              "name": "keyword.operator.nim"
            },
            {
              "include": "text.xml"
            }
          ]
        }
      ]
    },
    {
      "name": "source.xml.embedded.nim",
      "patterns": [
        {
          "begin": "(xml)(\\\"\\\"\\\")",
          "captures": {
            "1": {
              "name": "storage.type.function.nim"
            },
            "2": {
              "name": "comment.syntax.nim"
            }
          },
          "end": "\\\"\\\"\\\"",
          "endCaptures": {
            "0": {
              "name": "comment.syntax.nim"
            }
          },
          "patterns": [
            {
              "begin": "(?<!\\$)(\\$)\\(",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\)",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)\\{",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\}",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.control.nim"
                }
              },
              "end": "(\\{|\\n)",
              "endCaptures": {
                "1": {
                  "name": "plain"
                }
              },
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "match": "(?<!\\$)(\\$[a-zA-Z0-9_]+)",
              "name": "keyword.operator.nim"
            },
            {
              "include": "text.xml"
            }
          ]
        }
      ]
    },
    {
      "name": "source.js.embedded.nim",
      "patterns": [
        {
          "begin": "(js)(\\\"\\\"\\\")",
          "captures": {
            "1": {
              "name": "storage.type.function.nim"
            },
            "2": {
              "name": "comment.syntax.nim"
            }
          },
          "end": "\\\"\\\"\\\"",
          "endCaptures": {
            "0": {
              "name": "comment.syntax.nim"
            }
          },
          "patterns": [
            {
              "begin": "(?<!\\$)(\\$)\\(",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\)",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)\\{",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\}",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.control.nim"
                }
              },
              "end": "(\\{|\\n)",
              "endCaptures": {
                "1": {
                  "name": "plain"
                }
              },
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "match": "(?<!\\$)(\\$[a-zA-Z0-9_]+)",
              "name": "keyword.operator.nim"
            },
            {
              "include": "source.js"
            }
          ]
        }
      ]
    },
    {
      "name": "source.css.embedded.nim",
      "patterns": [
        {
          "begin": "(css)(\\\"\\\"\\\")",
          "captures": {
            "1": {
              "name": "storage.type.function.nim"
            },
            "2": {
              "name": "comment.syntax.nim"
            }
          },
          "end": "\\\"\\\"\\\"",
          "endCaptures": {
            "0": {
              "name": "comment.syntax.nim"
            }
          },
          "patterns": [
            {
              "begin": "(?<!\\$)(\\$)\\(",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\)",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)\\{",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\}",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.control.nim"
                }
              },
              "end": "(\\{|\\n)",
              "endCaptures": {
                "1": {
                  "name": "plain"
                }
              },
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "match": "(?<!\\$)(\\$[a-zA-Z0-9_]+)",
              "name": "keyword.operator.nim"
            },
            {
              "include": "source.css"
            }
          ]
        }
      ]
    },
    {
      "name": "source.glsl.embedded.nim",
      "patterns": [
        {
          "begin": "(glsl)(\\\"\\\"\\\")",
          "captures": {
            "1": {
              "name": "storage.type.function.nim"
            },
            "2": {
              "name": "comment.syntax.nim"
            }
          },
          "end": "\\\"\\\"\\\"",
          "endCaptures": {
            "0": {
              "name": "comment.syntax.nim"
            }
          },
          "patterns": [
            {
              "begin": "(?<!\\$)(\\$)\\(",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\)",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)\\{",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\}",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.control.nim"
                }
              },
              "end": "(\\{|\\n)",
              "endCaptures": {
                "1": {
                  "name": "plain"
                }
              },
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "match": "(?<!\\$)(\\$[a-zA-Z0-9_]+)",
              "name": "keyword.operator.nim"
            },
            {
              "include": "source.glsl"
            }
          ]
        }
      ]
    },
    {
      "name": "source.markdown.embedded.nim",
      "patterns": [
        {
          "begin": "(md)(\\\"\\\"\\\")",
          "captures": {
            "1": {
              "name": "storage.type.function.nim"
            },
            "2": {
              "name": "comment.syntax.nim"
            }
          },
          "end": "\\\"\\\"\\\"",
          "endCaptures": {
            "0": {
              "name": "comment.syntax.nim"
            }
          },
          "patterns": [
            {
              "begin": "(?<!\\$)(\\$)\\(",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\)",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)\\{",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.operator.nim"
                }
              },
              "end": "\\}",
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
              "captures": {
                "1": {
                  "name": "keyword.operator.nim"
                },
                "2": {
                  "name": "keyword.control.nim"
                }
              },
              "end": "(\\{|\\n)",
              "endCaptures": {
                "1": {
                  "name": "plain"
                }
              },
              "patterns": [
                {
                  "include": "source.nim"
                }
              ]
            },
            {
              "match": "(?<!\\$)(\\$[a-zA-Z0-9_]+)",
              "name": "keyword.operator.nim"
            },
            {
              "include": "text.html.markdown.multimarkdown"
            }
          ]
        }
      ]
    }
  ],
  "repository": {
    "escaped_char": {
      "patterns": [
        {
          "match": "\\\\[nN]",
          "name": "constant.character.escape.newline.nim"
        },
        {
          "match": "\\\\[cC]|\\\\[rR]",
          "name": "constant.character.escape.carriagereturn.nim"
        },
        {
          "match": "\\\\[lL]",
          "name": "constant.character.escape.linefeed.nim"
        },
        {
          "match": "\\\\[fF]",
          "name": "constant.character.escape.formfeed.nim"
        },
        {
          "match": "\\\\[tT]",
          "name": "constant.character.escape.tabulator.nim"
        },
        {
          "match": "\\\\[vV]",
          "name": "constant.character.escape.verticaltabulator.nim"
        },
        {
          "match": "\\\\\\\"",
          "name": "constant.character.escape.double-quote.nim"
        },
        {
          "match": "\\\\'",
          "name": "constant.character.escape.single-quote.nim"
        },
        {
          "match": "\\\\[0-9]+",
          "name": "constant.character.escape.chardecimalvalue.nim"
        },
        {
          "match": "\\\\[aA]",
          "name": "constant.character.escape.alert.nim"
        },
        {
          "match": "\\\\[bB]",
          "name": "constant.character.escape.backspace.nim"
        },
        {
          "match": "\\\\[eE]",
          "name": "constant.character.escape.escape.nim"
        },
        {
          "match": "\\\\[xX]\\h\\h",
          "name": "constant.character.escape.hex.nim"
        },
        {
          "match": "\\\\\\\\",
          "name": "constant.character.escape.backslash.nim"
        }
      ]
    }
  },
  "scopeName": "source.nim",
  "uuid": "fa6f2c1c-dd3f-4bcd-b2be-d05312be4080"
}